// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/brewery3/data/logger (interfaces: Log,Getter,Logger)

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	logger "github.com/mkuchenbecker/brewery3/data/logger"
	reflect "reflect"
)

// MockLog is a mock of Log interface
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// Level mocks base method
func (m *MockLog) Level(arg0 logger.Severity) logger.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level", arg0)
	ret0, _ := ret[0].(logger.Log)
	return ret0
}

// Level indicates an expected call of Level
func (mr *MockLogMockRecorder) Level(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockLog)(nil).Level), arg0)
}

// Log mocks base method
func (m *MockLog) Log(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", arg0, arg1)
}

// Log indicates an expected call of Log
func (mr *MockLogMockRecorder) Log(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLog)(nil).Log), arg0, arg1)
}

// LogIfError mocks base method
func (m *MockLog) LogIfError(arg0 context.Context, arg1 error, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogIfError", arg0, arg1, arg2)
}

// LogIfError indicates an expected call of LogIfError
func (mr *MockLogMockRecorder) LogIfError(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIfError", reflect.TypeOf((*MockLog)(nil).LogIfError), arg0, arg1, arg2)
}

// With mocks base method
func (m *MockLog) With(arg0 string, arg1 interface{}) logger.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0, arg1)
	ret0, _ := ret[0].(logger.Log)
	return ret0
}

// With indicates an expected call of With
func (mr *MockLogMockRecorder) With(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLog)(nil).With), arg0, arg1)
}

// WithError mocks base method
func (m *MockLog) WithError(arg0 error) logger.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithError", arg0)
	ret0, _ := ret[0].(logger.Log)
	return ret0
}

// WithError indicates an expected call of WithError
func (mr *MockLogMockRecorder) WithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockLog)(nil).WithError), arg0)
}

// MockGetter is a mock of Getter interface
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockGetter) Get(arg0 logger.Severity) logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockGetterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetter)(nil).Get), arg0)
}

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Printf mocks base method
func (m *MockLogger) Printf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockLoggerMockRecorder) Printf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}
