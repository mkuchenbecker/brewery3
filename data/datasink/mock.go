// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/brewery3/data/datasink (interfaces: Clock,DataSink,FirestoreClient)

// Package datasink is a generated GoMock package.
package datasink

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	data "github.com/mkuchenbecker/brewery3/data/gomodel/data"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	time "time"
)

// MockClock is a mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// MockDataSink is a mock of DataSink interface
type MockDataSink struct {
	ctrl     *gomock.Controller
	recorder *MockDataSinkMockRecorder
}

// MockDataSinkMockRecorder is the mock recorder for MockDataSink
type MockDataSinkMockRecorder struct {
	mock *MockDataSink
}

// NewMockDataSink creates a new mock instance
func NewMockDataSink(ctrl *gomock.Controller) *MockDataSink {
	mock := &MockDataSink{ctrl: ctrl}
	mock.recorder = &MockDataSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSink) EXPECT() *MockDataSinkMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDataSink) Get(arg0 context.Context, arg1 *data.GetRequest, arg2 ...grpc.CallOption) (*data.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*data.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDataSinkMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataSink)(nil).Get), varargs...)
}

// Send mocks base method
func (m *MockDataSink) Send(arg0 context.Context, arg1 *data.DataObject, arg2 ...grpc.CallOption) (*data.SendResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*data.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockDataSinkMockRecorder) Send(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDataSink)(nil).Send), varargs...)
}

// MockFirestoreClient is a mock of FirestoreClient interface
type MockFirestoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreClientMockRecorder
}

// MockFirestoreClientMockRecorder is the mock recorder for MockFirestoreClient
type MockFirestoreClientMockRecorder struct {
	mock *MockFirestoreClient
}

// NewMockFirestoreClient creates a new mock instance
func NewMockFirestoreClient(ctrl *gomock.Controller) *MockFirestoreClient {
	mock := &MockFirestoreClient{ctrl: ctrl}
	mock.recorder = &MockFirestoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirestoreClient) EXPECT() *MockFirestoreClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFirestoreClient) Get(arg0 context.Context, arg1, arg2 string) (RowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(RowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFirestoreClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirestoreClient)(nil).Get), arg0, arg1, arg2)
}

// Send mocks base method
func (m *MockFirestoreClient) Send(arg0 context.Context, arg1, arg2 string, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockFirestoreClientMockRecorder) Send(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFirestoreClient)(nil).Send), arg0, arg1, arg2, arg3)
}
