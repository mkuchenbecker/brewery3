// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/brewery3/data/datasink (interfaces: DataSink,FirestoreClient)

// Package mock_datasink is a generated GoMock package.
package mock_datasink

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	datasink "github.com/mkuchenbecker/brewery3/data/datasink"
	gomodel "github.com/mkuchenbecker/brewery3/data/gomodel"
	reflect "reflect"
)

// MockDataSink is a mock of DataSink interface
type MockDataSink struct {
	ctrl     *gomock.Controller
	recorder *MockDataSinkMockRecorder
}

// MockDataSinkMockRecorder is the mock recorder for MockDataSink
type MockDataSinkMockRecorder struct {
	mock *MockDataSink
}

// NewMockDataSink creates a new mock instance
func NewMockDataSink(ctrl *gomock.Controller) *MockDataSink {
	mock := &MockDataSink{ctrl: ctrl}
	mock.recorder = &MockDataSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSink) EXPECT() *MockDataSinkMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDataSink) Get(arg0 context.Context, arg1 *gomodel.GetRequest) (*gomodel.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*gomodel.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDataSinkMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataSink)(nil).Get), arg0, arg1)
}

// Send mocks base method
func (m *MockDataSink) Send(arg0 context.Context, arg1 *gomodel.DataObject) (*gomodel.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(*gomodel.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockDataSinkMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDataSink)(nil).Send), arg0, arg1)
}

// MockFirestoreClient is a mock of FirestoreClient interface
type MockFirestoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreClientMockRecorder
}

// MockFirestoreClientMockRecorder is the mock recorder for MockFirestoreClient
type MockFirestoreClientMockRecorder struct {
	mock *MockFirestoreClient
}

// NewMockFirestoreClient creates a new mock instance
func NewMockFirestoreClient(ctrl *gomock.Controller) *MockFirestoreClient {
	mock := &MockFirestoreClient{ctrl: ctrl}
	mock.recorder = &MockFirestoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirestoreClient) EXPECT() *MockFirestoreClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFirestoreClient) Get(arg0 context.Context, arg1, arg2 string) (datasink.RowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(datasink.RowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFirestoreClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFirestoreClient)(nil).Get), arg0, arg1, arg2)
}

// Send mocks base method
func (m *MockFirestoreClient) Send(arg0 context.Context, arg1, arg2 string, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockFirestoreClientMockRecorder) Send(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFirestoreClient)(nil).Send), arg0, arg1, arg2, arg3)
}
