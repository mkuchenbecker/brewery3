// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/brewery3/brewery/gpio (interfaces: IGPIO,Controller,GPIOPin)

// Package mock_gpio is a generated GoMock package.
package mock_gpio

import (
	gomock "github.com/golang/mock/gomock"
	gpio "github.com/mkuchenbecker/brewery3/brewery/gpio"
	reflect "reflect"
)

// MockIGPIO is a mock of IGPIO interface
type MockIGPIO struct {
	ctrl     *gomock.Controller
	recorder *MockIGPIOMockRecorder
}

// MockIGPIOMockRecorder is the mock recorder for MockIGPIO
type MockIGPIOMockRecorder struct {
	mock *MockIGPIO
}

// NewMockIGPIO creates a new mock instance
func NewMockIGPIO(ctrl *gomock.Controller) *MockIGPIO {
	mock := &MockIGPIO{ctrl: ctrl}
	mock.recorder = &MockIGPIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGPIO) EXPECT() *MockIGPIOMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIGPIO) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIGPIOMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIGPIO)(nil).Close))
}

// Open mocks base method
func (m *MockIGPIO) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockIGPIOMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIGPIO)(nil).Open))
}

// Pin mocks base method
func (m *MockIGPIO) Pin(arg0 byte) gpio.GPIOPin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", arg0)
	ret0, _ := ret[0].(gpio.GPIOPin)
	return ret0
}

// Pin indicates an expected call of Pin
func (mr *MockIGPIOMockRecorder) Pin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockIGPIO)(nil).Pin), arg0)
}

// MockController is a mock of Controller interface
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// PowerPin mocks base method
func (m *MockController) PowerPin(arg0 byte, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PowerPin indicates an expected call of PowerPin
func (mr *MockControllerMockRecorder) PowerPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerPin", reflect.TypeOf((*MockController)(nil).PowerPin), arg0, arg1)
}

// ReadTemperature mocks base method
func (m *MockController) ReadTemperature(arg0 gpio.TemperatureAddress) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemperature", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemperature indicates an expected call of ReadTemperature
func (mr *MockControllerMockRecorder) ReadTemperature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemperature", reflect.TypeOf((*MockController)(nil).ReadTemperature), arg0)
}

// MockGPIOPin is a mock of GPIOPin interface
type MockGPIOPin struct {
	ctrl     *gomock.Controller
	recorder *MockGPIOPinMockRecorder
}

// MockGPIOPinMockRecorder is the mock recorder for MockGPIOPin
type MockGPIOPinMockRecorder struct {
	mock *MockGPIOPin
}

// NewMockGPIOPin creates a new mock instance
func NewMockGPIOPin(ctrl *gomock.Controller) *MockGPIOPin {
	mock := &MockGPIOPin{ctrl: ctrl}
	mock.recorder = &MockGPIOPinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGPIOPin) EXPECT() *MockGPIOPinMockRecorder {
	return m.recorder
}

// High mocks base method
func (m *MockGPIOPin) High() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "High")
}

// High indicates an expected call of High
func (mr *MockGPIOPinMockRecorder) High() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "High", reflect.TypeOf((*MockGPIOPin)(nil).High))
}

// Low mocks base method
func (m *MockGPIOPin) Low() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Low")
}

// Low indicates an expected call of Low
func (mr *MockGPIOPinMockRecorder) Low() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Low", reflect.TypeOf((*MockGPIOPin)(nil).Low))
}
