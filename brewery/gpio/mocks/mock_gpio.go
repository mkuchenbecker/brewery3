// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/brewery3/brewery/gpio (interfaces: IGPIO,Pin,Temperature)

// Package mock_gpio is a generated GoMock package.
package mock_gpio

import (
	gomock "github.com/golang/mock/gomock"
	gpio "github.com/mkuchenbecker/brewery3/brewery/gpio"
	reflect "reflect"
)

// MockIGPIO is a mock of IGPIO interface
type MockIGPIO struct {
	ctrl     *gomock.Controller
	recorder *MockIGPIOMockRecorder
}

// MockIGPIOMockRecorder is the mock recorder for MockIGPIO
type MockIGPIOMockRecorder struct {
	mock *MockIGPIO
}

// NewMockIGPIO creates a new mock instance
func NewMockIGPIO(ctrl *gomock.Controller) *MockIGPIO {
	mock := &MockIGPIO{ctrl: ctrl}
	mock.recorder = &MockIGPIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIGPIO) EXPECT() *MockIGPIOMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIGPIO) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIGPIOMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIGPIO)(nil).Close))
}

// Open mocks base method
func (m *MockIGPIO) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockIGPIOMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIGPIO)(nil).Open))
}

// Pin mocks base method
func (m *MockIGPIO) Pin(arg0 byte) gpio.Pin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pin", arg0)
	ret0, _ := ret[0].(gpio.Pin)
	return ret0
}

// Pin indicates an expected call of Pin
func (mr *MockIGPIOMockRecorder) Pin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pin", reflect.TypeOf((*MockIGPIO)(nil).Pin), arg0)
}

// MockPin is a mock of Pin interface
type MockPin struct {
	ctrl     *gomock.Controller
	recorder *MockPinMockRecorder
}

// MockPinMockRecorder is the mock recorder for MockPin
type MockPinMockRecorder struct {
	mock *MockPin
}

// NewMockPin creates a new mock instance
func NewMockPin(ctrl *gomock.Controller) *MockPin {
	mock := &MockPin{ctrl: ctrl}
	mock.recorder = &MockPinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPin) EXPECT() *MockPinMockRecorder {
	return m.recorder
}

// High mocks base method
func (m *MockPin) High() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "High")
}

// High indicates an expected call of High
func (mr *MockPinMockRecorder) High() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "High", reflect.TypeOf((*MockPin)(nil).High))
}

// Low mocks base method
func (m *MockPin) Low() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Low")
}

// Low indicates an expected call of Low
func (mr *MockPinMockRecorder) Low() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Low", reflect.TypeOf((*MockPin)(nil).Low))
}

// Output mocks base method
func (m *MockPin) Output() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Output")
}

// Output indicates an expected call of Output
func (mr *MockPinMockRecorder) Output() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockPin)(nil).Output))
}

// MockTemperature is a mock of Temperature interface
type MockTemperature struct {
	ctrl     *gomock.Controller
	recorder *MockTemperatureMockRecorder
}

// MockTemperatureMockRecorder is the mock recorder for MockTemperature
type MockTemperatureMockRecorder struct {
	mock *MockTemperature
}

// NewMockTemperature creates a new mock instance
func NewMockTemperature(ctrl *gomock.Controller) *MockTemperature {
	mock := &MockTemperature{ctrl: ctrl}
	mock.recorder = &MockTemperatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemperature) EXPECT() *MockTemperatureMockRecorder {
	return m.recorder
}

// Sensors mocks base method
func (m *MockTemperature) Sensors() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sensors")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sensors indicates an expected call of Sensors
func (mr *MockTemperatureMockRecorder) Sensors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sensors", reflect.TypeOf((*MockTemperature)(nil).Sensors))
}

// Temperature mocks base method
func (m *MockTemperature) Temperature(arg0 gpio.TemperatureAddress) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Temperature", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Temperature indicates an expected call of Temperature
func (mr *MockTemperatureMockRecorder) Temperature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Temperature", reflect.TypeOf((*MockTemperature)(nil).Temperature), arg0)
}
