// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mkuchenbecker/brewery3/brewery/model/gomodel (interfaces: SwitchClient,ThermometerClient,BreweryClient)

// Package mock_gomodel is a generated GoMock package.
package mock_gomodel

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gomodel "github.com/mkuchenbecker/brewery3/brewery/model/gomodel"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSwitchClient is a mock of SwitchClient interface
type MockSwitchClient struct {
	ctrl     *gomock.Controller
	recorder *MockSwitchClientMockRecorder
}

// MockSwitchClientMockRecorder is the mock recorder for MockSwitchClient
type MockSwitchClientMockRecorder struct {
	mock *MockSwitchClient
}

// NewMockSwitchClient creates a new mock instance
func NewMockSwitchClient(ctrl *gomock.Controller) *MockSwitchClient {
	mock := &MockSwitchClient{ctrl: ctrl}
	mock.recorder = &MockSwitchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSwitchClient) EXPECT() *MockSwitchClientMockRecorder {
	return m.recorder
}

// Off mocks base method
func (m *MockSwitchClient) Off(arg0 context.Context, arg1 *gomodel.OffRequest, arg2 ...grpc.CallOption) (*gomodel.OffResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Off", varargs...)
	ret0, _ := ret[0].(*gomodel.OffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Off indicates an expected call of Off
func (mr *MockSwitchClientMockRecorder) Off(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Off", reflect.TypeOf((*MockSwitchClient)(nil).Off), varargs...)
}

// On mocks base method
func (m *MockSwitchClient) On(arg0 context.Context, arg1 *gomodel.OnRequest, arg2 ...grpc.CallOption) (*gomodel.OnResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "On", varargs...)
	ret0, _ := ret[0].(*gomodel.OnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// On indicates an expected call of On
func (mr *MockSwitchClientMockRecorder) On(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "On", reflect.TypeOf((*MockSwitchClient)(nil).On), varargs...)
}

// ToggleOn mocks base method
func (m *MockSwitchClient) ToggleOn(arg0 context.Context, arg1 *gomodel.ToggleOnRequest, arg2 ...grpc.CallOption) (*gomodel.ToggleOnResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ToggleOn", varargs...)
	ret0, _ := ret[0].(*gomodel.ToggleOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleOn indicates an expected call of ToggleOn
func (mr *MockSwitchClientMockRecorder) ToggleOn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleOn", reflect.TypeOf((*MockSwitchClient)(nil).ToggleOn), varargs...)
}

// MockThermometerClient is a mock of ThermometerClient interface
type MockThermometerClient struct {
	ctrl     *gomock.Controller
	recorder *MockThermometerClientMockRecorder
}

// MockThermometerClientMockRecorder is the mock recorder for MockThermometerClient
type MockThermometerClientMockRecorder struct {
	mock *MockThermometerClient
}

// NewMockThermometerClient creates a new mock instance
func NewMockThermometerClient(ctrl *gomock.Controller) *MockThermometerClient {
	mock := &MockThermometerClient{ctrl: ctrl}
	mock.recorder = &MockThermometerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThermometerClient) EXPECT() *MockThermometerClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockThermometerClient) Get(arg0 context.Context, arg1 *gomodel.GetRequest, arg2 ...grpc.CallOption) (*gomodel.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*gomodel.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockThermometerClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockThermometerClient)(nil).Get), varargs...)
}

// MockBreweryClient is a mock of BreweryClient interface
type MockBreweryClient struct {
	ctrl     *gomock.Controller
	recorder *MockBreweryClientMockRecorder
}

// MockBreweryClientMockRecorder is the mock recorder for MockBreweryClient
type MockBreweryClientMockRecorder struct {
	mock *MockBreweryClient
}

// NewMockBreweryClient creates a new mock instance
func NewMockBreweryClient(ctrl *gomock.Controller) *MockBreweryClient {
	mock := &MockBreweryClient{ctrl: ctrl}
	mock.recorder = &MockBreweryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBreweryClient) EXPECT() *MockBreweryClientMockRecorder {
	return m.recorder
}

// Control mocks base method
func (m *MockBreweryClient) Control(arg0 context.Context, arg1 *gomodel.ControlRequest, arg2 ...grpc.CallOption) (*gomodel.ControlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Control", varargs...)
	ret0, _ := ret[0].(*gomodel.ControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Control indicates an expected call of Control
func (mr *MockBreweryClientMockRecorder) Control(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Control", reflect.TypeOf((*MockBreweryClient)(nil).Control), varargs...)
}
